#!/usr/bin/python
#
# Knot-specific key destructor in PKCS #11
# using the "keymgr" utility.  See its help
# output for operational controls.
#
# Note that keymgr permits keys to be generated
# before a zone is known to Knot DNS.
#
# This process has interactions with ods-zonedata-recv-knot.py
# to add and remove zone data orthogonally, in spite of
# Knot DNS resisting such an approach.  The opposite of this
# file's operation is found in ods-keyops-knot-addkey.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys


import rabbitdnssec


# Determine the signing algorithm to use for newly added keys

curve_name = rabbitdnssec.my_config ('pkcs11') ['curve_name']

if curve_name == 'P-256':
	alg = 'ECDSAP256SHA256'
else:
	raise NotImplementedError (sys.argv [0] + ' got a request for an unsupported curve: ' + curve_name)


# Parse cmdline args
if len (sys.argv) < 2:
	sys.stderr.write ('Usage: ' + sys.argv [0] + ' zone...\n')
	sys.exit (1)
zones = sys.argv [1:]


def dnssec_strip (zone):
	# If a zone file exists, remove its DNSSEC data, meaning the
	# DNSKEY, NSEC/3 and RRSIG records.  This is done by setting
	# the zone to the unsigned input zone.  As a slight complication
	# (cough) we need to retain SOA serial numbering, so we do it
	# through ldns-zonediff with its options -S, -K and -N to pull
	# RRSIG, DNSKEY and NSEC/3 records into the comparison.
	#
	# Return zero on success; this is used in dnssec_disable.
	# Aim is to be atomic; non-zero return for complete inaction.
	#
	# This function assumes to run only once at the same time;
	# this is assured when run under Knot DNS's conf-begin.
	#
	signedzonefile = '/tmp/dnssec_strip.zone'  # we need a name...
	presigzonefile = '/var/opendnssec/unsigned/' + zone + '.txt'
	rv0 = os.system ('knotc zone-begin "' + zone + '"')
	rv1 = 0
	rv2 = 0
	if rv0==0:
		#DEBUG# print 'knotc zone-read "' + zone + '" | sed \'s/^\[[^]]*\] *//\'' + ' > "' + signedzonefile + '"'
		rv1 = os.system ('knotc zone-read "' + zone + '" | sed \'s/^\[[^]]*\] *//\'' + ' > "' + signedzonefile + '"')
	if rv0==0 and rv1==0:
		rv2 = os.system ('ldns-zonediff -k -S -K -N -o "' + zone + '" "' + signedzonefile + '" "' + presigzonefile + '" | knotc')
	try:
		pass #TODO#DEBUG# os.unlink (signedzonefile)
	except:
		pass
	if rv0==0 and rv1==0 and rv2==0:
		print 'Succeeded with rv0 ==', rv0
		print 'knotc zone-commit "' + zone + '"'
		if os.system ('knotc zone-commit "' + zone + '"'):
			print 'TODO:ERROR: Failed to commit ' + zone + '; liberally assuming empty update which would upset Knot DNS...'
			print 'knotc zone-abort "' + zone + '"'
			os.system ('knotc zone-abort "' + zone + '"')
		retval = 0
	else:
		print 'Failing with rv0 ==', rv0
		if rv0==0:
			print 'knotc zone-abort "' + zone + '"'
			os.system ('knotc zone-abort "' + zone + '"')
		#TODO# Report that Knot DNS could not strip DNSSEC records
		print 'TODO: ERROR: Knot DNS could not strip DNSSEC records for', zone, '(%d,%d,%d)' % (rv0,rv1,rv2)
		retval = 1
	return retval

def dnssec_disable (zone):
	# Ensure that a zone is no longer served with DNSSEC.
	# If the zone is no longer in existence, there is no
	# work to be done and this function succeeds (as there
	# is no longer a dependency on keys that have gone).
	#
	# Note: Zone data is removed orthogonally; when the zone file
	# continues to exist then Knot DNS will continue to serve the
	# zone file, but without signatures.  We must however take
	# action to remove these signatures and NSEC/3 data.
	#
	rv0 = os.system ('knotc conf-begin')
	rv1 = 0
	rv2 = 0
	if rv0==0:
		# Try to unset the zone property dnssec-signing; accept failure
		#
		# Note how silly: conf-get will return without error but unset
		# will report an error when a feature was previously unknown!
		rv1 = os.system ('knotc conf-unset "zone[' + zone + '].dnssec-signing"')
		if rv1 != 0:
			rv1 = 0
	if rv0==0 and rv1==0:
		rv2 = dnssec_strip (zone)
	if rv0==0 and rv1==0 and rv2==0:
		os.system ('knotc conf-commit')
	else:
		if rv0==0:
			os.system ('knotc conf-abort')
		#TODO# Report that Knot DNS could not disable DNSSEC
		print 'TODO: ERROR: Knot DNS could not disable DNSSEC for', zone, '(%d,%d,%d)' % (rv0,rv1,rv2)


# Find and delete keys
for zone in zones:
	fd = os.popen ('keymgr "' + zone + '" list')
	for fdl in fd:
		kid = fdl.split (' ', 1) [0]
		rv = os.system ('keymgr "' + zone + '" delete "' + kid + '"')
		if rv != 0:
			#TODO# Log error
			print 'TODO: ERROR: Failed to delete key ' + kid + ' for for zone=' + zone + ' alg=' + alg
	fd.close ()
	# disable DNSSEC and strip the zone while at it
	dnssec_disable (zone)

