#!/usr/bin/python
#
# Knot-specific key sharing from PKCS #11 using
# the "ods-votes-recv" utility.  Since PKCS #11 is
# updated concurrently, this utility will try
# with exponential fallback until successful.
#
# Note that keymgr permits keys to be generated
# before a zone is known to Knot DNS.
#
# This process has interactions with ods-zonedata-recv-knot.py
# to add and remove zone data orthogonally, in spite of
# Knot DNS resisting such an approach.  The opposite of this
# file's operation is found in ods-votes-knot-delkey.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys

from rabbitdnssec import log_debug, log_info, log_notice, log_warning, log_error, log_critical


# Parse commandline arguments
try:
	[_me,zone,keyid] = sys.argv
except:
	sys.stderr.write ('Usage: ' + sys.argv [0] + ' zone keyid\n')
	sys.exit (1)



def dnssec_enable (zone):
	# Ensure that a zone is served, with DNSSEC, by Knot DNS.
	# Note: Zone data is supplied orthogonally; when no zone file
	# exists there may be complaints from Knot DNS but it should
	# continue to function for all other zones.
	#
	# Note: This procedure is idempotent, key additions are neutral
	# for already-existing zones.
	#
	rv0 = os.system ('knotc conf-begin')
	rv1 = 0
	rv2 = 0
	if rv0==0:
		os.system ('knotc conf-set zone.domain "' + zone + '"')
		# Ignore the result; the zone may already exist; check that
		rv1 = os.system ('knotc conf-get "zone[' + zone + ']"')
	if rv0==0 and rv1==0:
		rv2 = os.system ('knotc conf-set "zone[' + zone + '].dnssec-signing" on')
	if rv0==0 and rv1==0 and rv2==0:
		os.system ('knotc conf-commit')
	else:
		if rv0==0:
			os.system ('knotc conf-abort')
		#TODO# Report that Knot DNS could not enable DNSSEC
		log_error ('Knot DNS could not enable DNSSEC for', zone, '(%d,%d,%d)' % (rv0,rv1,rv2))


print 'CMD> /usr/sbin/keymgr -C /var/lib/knot/confdb ' + zone + ' import-pkcs11 ' + keyid + ' ksk=yes zsk=yes'
status = os.system ('/usr/sbin/keymgr -C /var/lib/knot/confdb ' + zone + ' import-pkcs11 ' + keyid + ' ksk=yes zsk=yes')

if status != 0:
	log_error ('Failed to import zone', zone, 'key', keyid, 'from PKCS #11')
	log_error ('In lieu of key import, DNSSEC was not enabled for zone', zone)
else:
	dnssec_enable (zone)

sys.exit (os.WEXITSTATUS (status))

