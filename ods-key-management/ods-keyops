#!/usr/bin/env python
#
# ods-keyops -- Read ADDKEY / DELKEY operations and execute them
#
# This is the main procedure for key operations; it constantly loops
# with phases of command collection, batch key generation over PKCS #11
# and backup of the PKCS #11 result.  The two commands that work on
# PKCS #11 are deliberately placed in independent programs, so there is
# no shared PKCS #11 state and so the HSM cannot have pending work of
# any kind.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys
import re

import subprocess
import time

import pika

import rabbitdnssec
from rabbitdnssec import log_debug, log_info, log_notice, log_warning, log_error, log_critical


cfg = rabbitdnssec.my_config ()
hsm_sync_cmd = cfg.get ('hsm_sync_cmd')


cmd_patn = re.compile ('^(ADDKEY|DELKEY) ([a-zA-Z0-9-.]+)$')


backend = rabbitdnssec.my_backend ()

with rabbitdnssec.amqp_client_channel (
			username='collectkeyops',
			transactional=True) as chan:
	key_ops = rabbitdnssec.my_queue ('key_ops')
	votexg  = rabbitdnssec.my_exchange ()
	while True:
		qhdl = chan.queue_declare (queue=key_ops, passive=True)
		log_debug ('qhdl.method.message_count =', qhdl.method.message_count)
		log_debug ('Messages to retrieve:', chan.get_waiting_message_count ())
		log_debug ('Collecting messages from', key_ops)
		clx = rabbitdnssec.MessageCollector (chan, queue=key_ops)
		clx.collect ()
		# cmds = '\n'.join (clx.messages ())
		# log_debug ('cmds <<<' + cmds + '>>>')
		# log_debug ('Processing commands:\n * ' + cmds.replace ('\n', '\n * '))
		success = True
		add_zones = []
		del_zones = []
		for cmd in clx.messages ():
			try:
				(opcode,zone) = cmd_patn.match (cmd).groups ()
				if opcode == 'ADDKEY':
					add_zones.append (zone)
				elif opcode == 'DELKEY':
					del_zones.append (zone)
				else:
					raise Exception (cmd)
			except:
				log_error ('Illegal key_ops command: ' + cmd + '\n')
				succcess = False
		votes = []
		if success and len (add_zones) > 0:
			log_info ('Subcommand: ' +
				sys.argv [0] + '-' + backend + '-addkey '
				+ ' '.join (add_zones) + '\n')
			output = None
			try:
				output = subprocess.Popen (
					[sys.argv [0]+'-'+backend+'-addkey']
						+ add_zones,
					stdout=subprocess.PIPE).stdout
				for outln in output.readlines ():
					if outln [:7] == 'votes> ':
						votes.append (outln [7:].strip ())
			except subprocess.CalledProcessError:
				success = False
			finally:
				if output is not None:
					success = (output.wait () == 0)
		if success and len (del_zones) > 0:
			log_info ('Subcommand: '
				+ sys.argv [0] + '-' + backend + '-delkey '
				+ ' '.join (del_zones) + '\n')
			output = None
			try:
				output = subprocess.Popen (
					[sys.argv[0]+'-'+backend+'-delkey']
						+ del_zones,
					stdout=subprocess.PIPE).stdout
				for outln in output.readlines ():
					if outln [:7] == 'votes> ':
						votes.append (outln [7:].strip ())
			except subprocess.CalledProcessError:
				success = False
			finally:
				if output is not None:
					success = (output.wait () == 0)
		if success and len (votes) > 0:
			for vote in votes:
				chan.basic_publish (
					exchange=votexg,
					routing_key='signconf_votes',
					body=vote)
		if success:
			clx.ack ()
			log_info ('Acknowledged all -- done!')
			frame_method = chan.tx_commit ()
			txfail = type (frame_method.method) != pika.spec.Tx.CommitOk
			if txfail:
				raise Exception ('Commit failed after processing ' + key_ops)
			#TODO# Pluggable backends... or configurable command
			if hsm_sync_cmd is not None:
				exitval = os.system (hsm_sync_cmd)
				if exitval == 0:
					log_debug ('Submitted HSM key store for syncing')
				else:
					log_error ('Failure while trying to sync HSMs')
		else:
			clx.nack ()
			log_error ('Failure -- will sleep for 10 minutes and retry')
			time.sleep (600)

