#!/usr/bin/env python
#
# ods-utimaco-recv -- Receive external keys of an Utimaco HSM & integrate
#
# This program takes delivery of an Utimaco External Keys dump file over
# AMQP, and integrates them through external key recovery.
#
# Due to the slowness of the merging procedure, which Utimaco seems to
# handle with quadratical complexity, we exploit the line-at-a-time
# structure of the backup files, plus the fact that the two HSM instances
# represent the same keys with the same line format.  This enables us to
# merge in only added keys, which is a much faster operation.  It is still
# assumed that full backups are received over AMQP, because that is the
# simplest operationally.
#
# From: Rick van Rein <rick@openfortress.nl>


import os
import sys
import time
import socket
import ssl
import difflib

import pika

import rabbitdnssec
from rabbitdnssec import log_debug, log_info, log_notice, log_warning, log_error, log_critical


pkcs11_routing_keys = [ 'pkcs11_backup', 'pkcs11_extend' ]

cfg = rabbitdnssec.my_config ('ods-utimaco')
pkcs11_restorefile = cfg ['pkcs11_restorefile']
pkcs11_localfile    = cfg ['pkcs11_localfile']
username           = cfg ['username']

pkcs11_pinfile = rabbitdnssec.pkcs11_pinfile ()
exchangename   = rabbitdnssec.my_exchange ()
queuename      = rabbitdnssec.my_queue ('pkcs11_extend')

signer_machine = socket.gethostname ().split ('.') [0]


def process_msg (chan, mth, props, body):
	who = props.cluster_id or 'signer_cluster'
	actual_keys = set ()
	try:
		if os.system ('p11tool2 Force=1 LoginUser=`cat "' + pkcs11_pinfile + '"` BackupExternalKeys="' + pkcs11_localfile + '"') != 0:
			log_critical ('Failure during check of local keys')
			raise Exception ()
		actual_keys = set (open (pkcs11_localfile).read ().split ('\n') [1:]) - set ([''])
	except:
		actual_keys = set ()
	(target_head,target_tail) = body.split ('\n', 1)
	target_keys = set (target_tail.split ('\n')) - set ([''])
	outfh = open (pkcs11_restorefile, 'w')
	outfh.write (target_head + '\n')
	for k in target_keys.difference (actual_keys):
		outfh.write (k)
		outfh.write ('\n')
	outfh.close ()
	if os.system ('p11tool2 LoginUser=`cat "' + pkcs11_pinfile + '"` RestoreExternalKeys="' + pkcs11_restorefile + '"') != 0:
		log_error ('Failure during restore of external keys from', who)
		chan.basic_nack (delivery_tag=mth.delivery_tag, requeue=False)
		chan.tx_rollback ()
	else:
		log_info ('Successfully restored external keys from', who, 'in', len (body), 'bytes')
		chan.basic_ack  (delivery_tag=mth.delivery_tag)
		chan.tx_commit ()
		#TODO# Possibly process failed transaction?


creds   = rabbitdnssec.my_credentials (ovr_appname='ods-utimaco')
cnxparm = rabbitdnssec.my_connectionparameters (creds)
props   = rabbitdnssec.my_basicproperties (ovr_username='pkcs11update')

cnx = None
chan = None
try:
	cnx = pika.BlockingConnection (cnxparm)
	chan = cnx.channel ()
	chan.basic_consume (process_msg, queue=queuename)
	chan.tx_select ()
	chan.start_consuming ()
	log_info ('Done consuming; committing transaction')
except pika.exceptions.AMQPChannelError, e:
	log_error ('AMQP Channel Error:', e)
	sys.exit (1)
except pika.exceptions.AMQPError, e:
	log_error ('AMQP Error:', e)
	sys.exit (1)
finally:
	if chan is not None:
		chan.tx_rollback ()
		chan = None
	if cnx is not None:
		cnx.close ()
	cnx = None

sys.exit (0)
